# ***************************************************************************
# *  Copyright 2022 Joseph Molnar
# *
# *  Licensed under the Apache License, Version 2.0 (the "License");
# *  you may not use this file except in compliance with the License.
# *  You may obtain a copy of the License at
# *
# *      http://www.apache.org/licenses/LICENSE-2.0
# *
# *  Unless required by applicable law or agreed to in writing, software
# *  distributed under the License is distributed on an "AS IS" BASIS,
# *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# *  See the License for the specific language governing permissions and
# *  limitations under the License.
# ***************************************************************************


stop_alarm:
  alias: Stop Alarm
  description: If an the Sonos device is playing music it stops it, otherwise it will
    look for an alarm within a time window and stops it from going off.
  fields:
    entity:
      description: The entity id of the device to stop the alarm on.
      name: Entity
      required: true
      selector:
        entity:
          domain: media_player
          integration: sonos
    delta:
      name: Delta
      description: If music isn't playing, it will look for an alarm to disable within
        the next specified number of minutes.
      required: false
      selector:
        number:
          min: 0
          max: 240
          unit_of_measurement: minutes
          mode: slider
  sequence:
  - service: logbook.log
    data:
      name: Entities
      message: "
      {% set entities = device_entities( device_id( entity ) ) %} 
      {% for entity_id in entities %}
        {% set id_parts = entity_id.split('.') %}
        {% set switch = states[id_parts[0]][id_parts[1]] %}
        {% set alarm_id = state_attr( entity_id, \"alarm_id\") %}
        {% if switch.domain == \"switch\" and alarm_id != \"None\" and switch.state == \"on\" %}
          {{ entity_id }} -> {{ alarm_id }} 
        {% endif %}
      {% endfor %}
      "


# {%- set entities = device_entities( device_id( "media_player.master_bedroom" ) ) -%}
# {%- set current_time  = now() %}
# {%- set current_weekday = current_time.isoweekday() %}
# {%- set acceptable_delta = timedelta(hours=5,minutes=40)-%}
# {%- set found_alarm = namespace( found = false, entity_id = "", delta = specified_delta) -%}
# "current time: {{current_time}}"
# "current day of week: {{current_weekday}}"
# "----------------------------"
# {# we iterate through all the entities on the specified entity looking for alarms #}
# {%- for entity_id in entities -%}
#   {%- set id_parts = entity_id.split('.') -%}
#   {%- set switch = states[id_parts[0]][id_parts[1]] -%}
#   {%- set alarm_id = state_attr( entity_id, "alarm_id") -%}
#   {# we see if we found a switch that has an alarm#}
#   {%- if switch.domain == "switch" and alarm_id != None and switch.state == "on" %}
#     {# we found a switch with an alarm id, and the alarm is on, so we look to consider it #}
#     {#
#        we take the 'ON_XYZ' values and iterate through each day and calculate
#        a time by taking the day of the week and subtracting by the current day of week
#        if less than 0, then add seven to the number and that will indicate potential day in the future
#        create a delta by multiplying the number by 24 (hours), then add the alarm time
#        Then I take the current hours / minutes from today and I subtract those from the delta
#        if the number difference is >= 0 but less than the desired delta, we are good
#        we store this number in case we find more
#     #}
#     {%- set time = state_attr( entity_id, "time") -%}
#     {%- set timestamp = today_at(state_attr( entity_id, "time")) -%}
#     {%- set delta = current_time - timestamp -%}
#     {%- set day = state_attr( entity_id, "recurrence") %}
#     "entity_id: {{ entity_id }}"
#     "alarm_id: {{ alarm_id }}"
#     "time: {{ time }}"
#     "delta:  {{ delta }}"
#     "day: {{ day }}"
#     {%- if day == "DAILY" %}
#     {%- endif %}
#     {%- if state_attr( entity_id, "scheduled_today") == true and acceptable_delta >= delta %}
#       {%- if found_alarm.found == false or found_alarm.delta > delta %}
#         {%- set found_alarm.found = true %}
#         {%- set found_alarm.entity_id = entity_id %}
#         {%- set found_alarm.delta = delta %}
#         "for day of week: {{ state_attr( entity_id, "scheduled_today") }}"
#         "for time: {{ delta }}"
#       {%- endif %}
#     {%- endif %}
#     "----------------------------"
#   {%- endif -%}
# {%- endfor -%}
# {# if we find the alarm then we can stop / pause it#}
# {%- if found_alarm.found == true %}
#   "matched_id: {{ found_alarm.entity_id }}"
#   "matched_delta: {{ found_alarm.delta }}"
# {%- endif -%}

# {# https://www.home-assistant.io/blog/2017/10/15/templating-date-time/ #}